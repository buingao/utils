{"version":3,"file":"bundle.esm.js","sources":["../src/modules/Base.ts","../src/modules/Validate.ts"],"sourcesContent":["const Base = {\n  /**\n   * 获取数据类型\n   * @param params\n   * @returns 'String','Number'...\n   */\n  getTypeOf: (params: unknown): string | undefined => {\n    const type = Object.prototype.toString.call(params)\n    return type.match(/\\[\\w+\\W(\\w+)\\]$/)?.[1]\n  },\n  /**\n   * 使用keyof进行判断\n   * key值的类型不是string，在javascript中是默认给你转好的，而在Typescript中则不是\n   * @param key\n   * @param object\n   * @returns\n   */\n  isValidKey: (\n    key: string | number | symbol,\n    object: object\n  ): key is keyof typeof object => {\n    return key in object\n  }\n  /**\n   * 深拷贝\n   * @param obj 需要深拷贝的对象\n   * @returns\n   */\n  // deepClone: (obj: Object) => {\n  //   // 不是引用类型或者是null的话直接返回\n  //   if (typeof obj !== 'object' || obj === null) {\n  //     return obj\n  //   }\n  //   // 初始化结果\n  //   let result = {}\n  //   if (obj instanceof Array) {\n  //     result = []\n  //   }\n\n  //   for (const key in obj) {\n  //     // 保证不是原型上的属性\n  //     // obj.hasOwnProperty(key)\n  //     if (Object.prototype.hasOwnProperty.call(obj, key)) {\n  //       if (Base.isValidKey(key, obj)) {\n  //         // 递归调用\n  //         result[key] = Base.deepClone(obj[key])\n  //       }\n  //     }\n  //   }\n  //   return result\n  // }\n}\n\nexport default Base\n","import Base from './Base'\n\n// 加权因子\nconst weightFactor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]\n// 校验码\nconst checkCode = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']\n// 身份证号正则，身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X\nconst idNoReg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/\n// 身份证号格式的正则思路，支持2029年，2030之后这条正则就不满足了\nconst idcardPattern =\n  /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0-2][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/\nconst regFifteen = /^(\\d{6})(\\d{2})(\\d{2})(\\d{2})(\\d{3})$/\nconst regEighteen = /^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X)$/\n// 城市代码列表\nconst identityCodeCity = {\n  11: '北京',\n  12: '天津',\n  13: '河北',\n  14: '山西',\n  15: '内蒙古',\n  21: '辽宁',\n  22: '吉林',\n  23: '黑龙江 ',\n  31: '上海',\n  32: '江苏',\n  33: '浙江',\n  34: '安徽',\n  35: '福建',\n  36: '江西',\n  37: '山东',\n  41: '河南',\n  42: '湖北 ',\n  43: '湖南',\n  44: '广东',\n  45: '广西',\n  46: '海南',\n  50: '重庆',\n  51: '四川',\n  52: '贵州',\n  53: '云南',\n  54: '西藏 ',\n  61: '陕西',\n  62: '甘肃',\n  63: '青海',\n  64: '宁夏',\n  65: '新疆',\n  71: '台湾',\n  81: '香港',\n  82: '澳门',\n  91: '国外 '\n}\n\nconst validate = {\n  idno: {\n    /**\n     * 获取最后一位加权因子值\n     * @param code 身份正号前17位\n     * @returns\n     */\n    getIdnoWeightingFactor: (code: string) => {\n      const total = `${code}`.split('').reduce((t, cv, ci, arr) => {\n        return t + weightFactor[ci] * +cv\n      }, 0)\n      const remainder = total % 11\n      return checkCode[remainder]\n    },\n    /**\n     * 根据身份证号获取性别\n     * @param idno\n     * @returns '1' boy/man/男 '0' girl/woman/女 '-1' 身份证号错误\n     */\n    getGenderByIdno: (idno: string) => {\n      // 排除空格\n      const idNo = idno.replace(/\\s*/g, '')\n      if (!validate.idno.checkIdNoByBasicLogic(idNo)) {\n        return '-1'\n      }\n      const i17 = parseInt(idNo.substring(idNo.length === 18 ? 17 : 14, 1), 10)\n      // 第17位或第14位数字，用来表示性别，奇数为男，偶数为女\n      const gender = i17 % 2 === 0 ? '0' : '1'\n      return gender\n    },\n    /**\n     * 通过身份证号获取姓名\n     * @param idno\n     * @returns\n     */\n    getBirthdayByIdno: (idno: string) => {\n      const idNo = idno.replace(/\\s*/g, '')\n      if (!validate.idno.checkIdNoByBasicLogic(idNo)) {\n        return '-1'\n      }\n      let dateArr: string[] = []\n      if (idno.length === 15) {\n        const t = idno.match(regFifteen)\n        dateArr = t !== null ? t : []\n      } else if (idno.length === 18) {\n        const t = idno.match(regEighteen)\n        dateArr = t !== null ? t : []\n      }\n      return dateArr.slice(1, 4)\n\n      // const tmpStr =\n      //   idNo.length === 18\n      //     ? idNo.substring(6, 14)\n      //     : '19' + idNo.substring(6, 12)\n      // return [\n      //   tmpStr.substring(0, 4),\n      //   tmpStr.substring(4, 6),\n      //   tmpStr.substring(6)\n      // ]\n    },\n    /**\n     * 身份证号简单校验，位数正确即可\n     * @param idno\n     * @returns\n     */\n    checkIdNoByLength: (idno: string) => {\n      // 检查号码是否符合规范，包括长度，类型\n      return idNoReg.test(idno)\n    },\n    /**\n     * 身份证号校验，基本格式正确，肉眼看不出问题\n     * @param idno\n     * @returns\n     */\n    checkIdNoByBasicLogic: (idno: string) => {\n      return idcardPattern.test(idno)\n    },\n    /**\n     * 15位转18位身份证号\n     * @param idno\n     * @returns\n     */\n    changeFivteenToEighteen: (idno: string) => {\n      if (idno.length === 15) {\n        const card =\n          idno.substring(0, 6) + '19' + idno.substr(6, idno.length - 6)\n        const wfcode = validate.idno.getIdnoWeightingFactor(card)\n        return `${card}${wfcode}`\n      }\n      return idno\n    },\n    /**\n     * 取身份证前两位，校验省份\n     * @param card\n     * @returns\n     *\n     * 解决 元素隐式具有 “any“ 类型，因为类型为 “string“ 的表达式不能用于索引类型 “Object“。 在类型 “Object“ 上找不到具有类型为 “string“ 的参数的索引签名\n     */\n    checkProvince: (card: string) => {\n      const provinceCode = card.substring(0, 2)\n      if (Base.isValidKey(provinceCode, identityCodeCity)) {\n        return identityCodeCity[provinceCode] !== undefined\n      }\n      return false\n    },\n    /**\n     * 校验出生日期\n     * @param year\n     * @param month\n     * @param day\n     * @param birthday\n     * @returns\n     */\n    verifyBirthday: (\n      year: string,\n      month: string,\n      day: string,\n      birthday: Date\n    ) => {\n      // 校验日期 ，15位以'19'年份来进行补齐。\n      const now = new Date()\n      const nowYear = now.getFullYear()\n      // 年月日是否合理\n      if (\n        birthday.getFullYear() === +year &&\n        birthday.getMonth() + 1 === +month &&\n        birthday.getDate() === +day\n      ) {\n        // 判断年份的范围（3岁到150岁之间)\n        const time = nowYear - +year\n        return time >= 3 && time <= 150\n      }\n      return false\n    },\n    checkBirthday: (card: string) => {\n      // 检查生日是否正确，15位以'19'年份来进行补齐。\n      const len = card.length\n      // 身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字\n      if (len === 15) {\n        const arrData = card.match(regFifteen) // 正则取号码内所含出年月日数据\n        if (Array.isArray(arrData)) {\n          const year = arrData[2]\n          const month = arrData[3]\n          const day = arrData[4]\n          const birthday = new Date('19' + year + '/' + month + '/' + day)\n          return validate.idno.verifyBirthday('19' + year, month, day, birthday)\n        }\n      }\n      // 身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X\n      if (len === 18) {\n        const arrData = card.match(regEighteen) // 正则取号码内所含出年月日数据\n        if (Array.isArray(arrData)) {\n          const year = arrData[2]\n          const month = arrData[3]\n          const day = arrData[4]\n          const birthday = new Date(year + '/' + month + '/' + day)\n          return validate.idno.verifyBirthday(year, month, day, birthday)\n        }\n      }\n      return false\n    },\n    /**\n     * 校验位的检测\n     * @param card\n     * @returns\n     */\n    checkParity: (card: string) => {\n      const idno = validate.idno.changeFivteenToEighteen(card) // 15位转18位\n      if (idno.length === 18) {\n        // 根据前17位计算出第18位的值\n        const wfcode = validate.idno.getIdnoWeightingFactor(\n          idno.substring(0, 17)\n        )\n        return wfcode === idno.substr(17, 1)\n      }\n      return false\n    },\n    /**\n     * 严格校验，校验加权因子，再严格只能接入公安系统查询\n     * @param idno\n     */\n    checkIdNoStrict: (idno: string) => {\n      /*\n       * 1~2 所在省（直辖市、自治区）的代码\n       * 3~4 所在地级市（自治州）的代码\n       * 5~6 所在区（县、自治县、县级市）的代码\n       * 7~10 出生年份\n       * 11~12 出生月份\n       * 13~14 出生日\n       * 15~16 所在派出所代码\n       * 17 奇数代表男性，偶数代表女性\n       * 18 校验码，生成规则参考上方的ISO 7064:1983.MOD 11-2算法\n       */\n      // 是否为空 + 校验长度，类型 + 检查省份 + 校验生日 + 检验位的检测\n      const isPass =\n        !(idno === '') &&\n        validate.idno.checkIdNoByLength(idno) &&\n        validate.idno.checkProvince(idno) &&\n        validate.idno.checkBirthday(idno) &&\n        validate.idno.checkParity(idno)\n      return isPass\n    }\n  }\n}\n\nexport default validate\n"],"names":["Base","getTypeOf","params","_a","Object","prototype","toString","call","match","isValidKey","key","object","weightFactor","checkCode","idNoReg","idcardPattern","regFifteen","regEighteen","identityCodeCity","validate","idno","getIdnoWeightingFactor","code","total","concat","split","reduce","t","cv","ci","arr","getGenderByIdno","idNo","replace","checkIdNoByBasicLogic","parseInt","substring","length","getBirthdayByIdno","dateArr","slice","checkIdNoByLength","test","changeFivteenToEighteen","card","substr","wfcode","checkProvince","provinceCode","undefined","verifyBirthday","year","month","day","birthday","nowYear","Date","getFullYear","getMonth","getDate","time","checkBirthday","len","arrData","Array","isArray","checkParity","checkIdNoStrict"],"mappings":"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"}